//ps -ax | grep tomcat

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;

class Word
{
	private String 	m_word		;
	private boolean m_noun		;
	private int 	m_frequency	;
	
	public void SetWord			(String  newVal) { this.m_word 		= newVal; }
	public void SetNoun			(boolean newVal) { this.m_noun 		= newVal; }
	public void SetFrequency	(int     newVal) { this.m_frequency = newVal; }
	
	public String	GetWord()		{ return m_word; 		}
	public boolean	IsNoun()		{ return m_noun; 		}
	public int		GetFrequency()	{ return m_frequency; 	}
	
	
	public Word(String word, boolean Noun, int frequency)
	{
		this.m_word 		= word;
		this.m_noun 		= Noun;
		this.m_frequency 	= frequency;
	}
}

class TreeMapComperator implements Comparator<Integer>
{
    public int compare(Integer o1,Integer o2)
    {
    	return o1 < o2 ? 1 : 0;
    }
}


public class Main 
{
	private static String DBIP = "127.0.0.1";
	
	public static void main(String[] args)
	{
		int Fq = 1;
		if (args.length > 0)	Fq 	 = Integer.parseInt(args[0]);
		if (args.length > 1)	DBIP = args[1];
		
		Connection conn = GetDBConnection();
		
		BufferedReader inputBiffer = 
				new BufferedReader(new InputStreamReader(System.in));
		
		String inputSentence = "#WAITING_FOR_INPUT";
		
		for (;;) //Till break;
		{
			try		{ inputSentence = inputBiffer.readLine(); } 
			catch 	( IOException e ) 
			{ Debug.Error("Invalid input stream!");	}
			
			if (inputSentence.contains("[@24]"))
				break;
			
			List<Word> 	words	= AnalyseSentence	(conn, inputSentence);
			String 		ret		= StripOutAndConcat	(words, Fq			);
			
			if (ret != null)
				System.out.println(ret + "[@23]");
		}
	}
	
	public static String[] SplitSentence(String sentence)
	{ return sentence.split(" "); }
	
	public static List<Word> AnalyseSentence(Connection conn, String sentence)
	{		
		String[] 	parts = SplitSentence(sentence);
		List<Word> 	words = new ArrayList<Word>();
				
		for (int i = 0; i < parts.length; i++)
		{
			String part = parts[i];
			
			boolean noun 		= IsWordNoun(conn, part);
			int 	frequency 	= noun ? GetWordCount(conn, part) : -1;
			
			Word word = new Word(part, noun, frequency);
			words.add(word);
		}
		return words;
	}
	
	public static String StripOutAndConcat(List<Word> words, int Fq)
	{
		//Below:index of word in list by frequency
		Map<Integer, Integer> nounsFQMap = new HashMap<Integer, Integer>();
		
		for (int i = 0; i < words.size(); i++)
			if (words.get(i).IsNoun()) 
					nounsFQMap.put(i, 
							words.get(i).GetFrequency());
		
		if (nounsFQMap.size() == 0) return null;
		
		nounsFQMap = sortByValue(nounsFQMap);
		
		int maxTake 	= nounsFQMap.size();
		int selection 	= (int)Math.floor(Math.random() * Math.min(maxTake, Fq));
		int index 		= (int)nounsFQMap.keySet().toArray()[selection];
		
		words.get(index).SetWord(
				"[@22]" + words.get(index).GetWord()
				); 
		
		
		//CONCAT
		StringBuilder sb = new StringBuilder();
		
		for (int i = 0; i < words.size(); i++)
		{
			boolean lastWord = i == words.size()-1;
			sb.append(words.get(i).GetWord() + (lastWord ? "" : " "));
		}
		
		return sb.toString();
	}
	
	//BELOW CURRENTLY NOT IN USE
	public static Map<Integer, Integer> SortMapByKey(Map<Integer, Integer> orgMap)
	{
		TreeMap<Integer, Integer> treeMap = new TreeMap<Integer, Integer>();

		for (int i = 0; i < orgMap.size(); i++)
		{
			Integer index = (Integer) orgMap.keySet().toArray()[i];
			treeMap.put(index, orgMap.get(index));
		}
		return treeMap;
	}
	//ABOVE CURRENTLY NOT IS USE

	public static <K, V extends Comparable<? super V>> Map<K, V> 
    	sortByValue( Map<K, V> map )
	{
	    List<Map.Entry<K, V>> list =
	        new LinkedList<Map.Entry<K, V>>( map.entrySet());
	    
	    Collections.sort( list, 
		    new Comparator<Map.Entry<K, V>>()
		    {
		        public int compare( Map.Entry<K, V> o1, Map.Entry<K, V> o2 )
		        {
		            return (o1.getValue()).compareTo( o2.getValue() );
		        }
		    } 
	    );
	
	    Map<K, V> result = new LinkedHashMap<K, V>();
	    
	    for (Map.Entry<K, V> entry : list)
	    {
	        result.put( entry.getKey(), entry.getValue() );
	    }
	    
	    return result;
	}

	
	public static boolean IsWordNoun(Connection conn, String word)
	{
		try
		{
			PreparedStatement stmt = conn.prepareStatement(SQL_countInNounTable);
			stmt.setString(1, word);
			
			ResultSet rs = stmt.executeQuery();
			
			rs.next();
			return rs.getInt("count") == 1;
			
		} catch (SQLException e) 
		{ Debug.Error(e.getMessage()); }
		return false;
	}
	
	public static int GetWordCount(Connection conn, String word)
	{
		try
		{
			PreparedStatement stmt = conn.prepareStatement(SQL_getWordFrequency);
			stmt.setString(1, word);
			
			ResultSet rs = stmt.executeQuery();

			rs.next();
			return rs.getInt("count");

		} catch (SQLException e) 
		{ Debug.Error(e.getMessage()); }
		return -1;
	}
	
	public static Connection GetDBConnection()
	{
		MysqlDataSource dataSource = new MysqlDataSource();
		dataSource.setUser			("jh");
		dataSource.setPassword		(""	 );
		dataSource.setDatabaseName	("WC");
		dataSource.setServerName	(DBIP);
		
		Connection conn;
		
		try {
			conn = dataSource.getConnection();
			
			conn.createStatement().executeQuery(SQL_setCollationConnection);
			return conn;
		} catch (SQLException e) 
		{ Debug.Error(e.getMessage()); }
		return null;
	}
	
	public static final String SQL_countInNounTable 		= "SELECT COUNT(*) AS count FROM Nomen WHERE Wort=?";
	public static final String SQL_getWordFrequency 		= "SELECT sum(anz) AS count FROM woAnz WHERE Wort=?";
	public static final String SQL_setCollationConnection 	= "SET collation_connection = 'latin1_general_cs'";
	
	
	
}
